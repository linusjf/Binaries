#!/usr/bin/env bash
# shellcheck disable=SC2155,SC1090,SC1091
######################################################################
# Setup configuration files by linking from Configurations repository
######################################################################
set -euo pipefail
shopt -s inherit_errexit

readonly SCRIPT_NAME=$(basename "$0")
readonly EXIT_SUCCESS=0
readonly EXIT_FAILURE=1

verbose=false
dry_run=false
debug=false

# Source color utilities
if command -v realpath >/dev/null 2>&1; then
  SCRIPT_DIR=$(dirname "$(realpath "$0")")
else
  SCRIPT_DIR=$(cd -- "$(dirname -- "$0")" &> /dev/null && pwd -P)
fi
source "${SCRIPT_DIR}/color.sh"

function usage() {
  cat << EOF
${SCRIPT_NAME} - Setup configuration files by linking from Configurations repository

Usage: ${SCRIPT_NAME} [OPTION]

Options:
  -d, --dry-run    Show what would be done without making changes
  -v, --verbose    Enable verbose output
  --debug          Enable debug output
  -h, --help       Display this help message

Examples:
  ${SCRIPT_NAME}                # Normal operation
  ${SCRIPT_NAME} -d             # Dry run mode
  ${SCRIPT_NAME} -v             # Verbose mode
  ${SCRIPT_NAME} --debug        # Debug mode
EOF
  exit ${EXIT_FAILURE}
}

function require_commands() {
  local missing_deps=()
  for dep in "$@"; do
    if ! command -v "$dep" &> /dev/null; then
      missing_deps+=("$dep")
    fi
  done

  if [[ ${#missing_deps[@]} -gt 0 ]]; then
    print_error "Missing dependencies:"
    for dep in "${missing_deps[@]}"; do
      print_error "  - ${dep}"
    done
    return ${EXIT_FAILURE}
  fi
}

function check_configurations_repo() {
  if [[ ! -d "${HOME}/Configurations" ]]; then
    print_error "Configurations repository not found at ${HOME}/Configurations"
    read -rp "Clone it now? (y/N) " answer
    if [[ "${answer,,}" == "y" ]]; then
      require_commands git
      if ${dry_run}; then
        print_info "[DRY RUN] Would clone Configurations repo"
      else
        git clone https://github.com/linusjf/Configurations "${HOME}/Configurations"
      fi
    else
      read -rp "Continue anyway? (y/N) " answer
      [[ "${answer,,}" != "y" ]] && exit ${EXIT_FAILURE}
    fi
  fi
}

function link_configuration_item() {
  local item="$1"
  local config_dir="${HOME}/Configurations"
  local home_dir="${HOME}"
  local item_path="${config_dir}/${item}"
  local link_path="${home_dir}/${item}"

  [[ ! -e "${item_path}" ]] && {
    print_warning "Skipping missing: ${item_path}"
    return
  }

  if [[ -e "${link_path}" ]]; then
    if [[ -L "${link_path}" ]]; then
      local real_path
      real_path=$(readlink -f "${link_path}")
      [[ "${real_path}" == *"Configurations"* ]] && {
        print_warning "Already linked: ${link_path}"
        return
      }
    fi

    if ${dry_run}; then
      print_info "[DRY RUN] Would backup: ${link_path}"
    else
      cp --backup=numbered -r "${link_path}" "${link_path}.old" \
        || {
          print_error "Backup failed: ${link_path}"
          return ${EXIT_FAILURE}
        }
      rm -rf "${link_path}"
    fi
  fi

  if ${dry_run}; then
    print_info "[DRY RUN] Would link: ${link_path} -> ${item_path}"
  else
    ln -sf "${item_path}" "${link_path}" \
      || {
        print_error "Failed to link: ${link_path}"
        return ${EXIT_FAILURE}
      }
    ${verbose} && print_info "Linked: ${link_path} -> ${item_path}"
  fi
}

function handle_git_config() {
  if [[ -L "${HOME}/.git" ]]; then
    local real_path
    real_path=$(readlink -f "${HOME}/.git")
    [[ "${real_path}" == *"Configurations"* ]] && {
      print_warning "Git config already linked"
      return
    }
  fi

  if ${dry_run}; then
    print_info "[DRY RUN] Would setup git config"
  else
    cp --backup=numbered -r "${HOME}/.git" "${HOME}/.git.old" \
      || {
        print_error "Git config backup failed"
        return ${EXIT_FAILURE}
      }
    ln -sf "${HOME}/Configurations/git" "${HOME}/.git"
    ${verbose} && print_info "Git config linked"
  fi
}

function main() {
  local config_items=(
    .bashrc .bash_profile .bash_aliases .bash_logout
    .gitconfig .gitrc .github .gitguardian.yml .emacs .sqliterc
    .ssh .termux .tmux.conf .vimrc .jupyter .aider.conf.yml
    .aider.model.settings.yml templates .gitignore_global .shellcheckrc
  )

  require_commands cp rm ln git

  check_configurations_repo

  for item in "${config_items[@]}"; do
    link_configuration_item "${item}"
  done

  handle_git_config
}

while [[ $# -gt 0 ]]; do
  case "$1" in
    -d | --dry-run)
      dry_run=true
      shift
      ;;
    -v | --verbose)
      verbose=true
      shift
      ;;
    --debug)
      debug=true
      set -x
      shift
      ;;
    -h | --help) usage ;;
    *)
      print_error "Invalid option: $1"
      usage
      ;;
  esac
done

if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
  main "$@"
fi

exit ${EXIT_SUCCESS}
