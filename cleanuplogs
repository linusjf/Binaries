#!/usr/bin/env bash
set -euo pipefail
shopt -s inherit_errexit
# Cleanup logs script - truncates log files to save disk space
# Usage: cleanuplogs [number-of-lines]
# Version 3.1

# Source the require.sh file
SCRIPT_DIR=$(dirname "$(readlink -f "$0")")
# shellcheck disable=SC1091
source "$SCRIPT_DIR/require.sh"

require mv tail dirname readlink basename

MY_DIR="$(dirname "$(readlink -f "$0")")"

# shellcheck disable=SC1091
source "${MY_DIR}/debug.sh"

# shellcheck disable=SC2034
DEBUG=false

# shellcheck disable=SC1091
source "${MY_DIR}/debugon.sh"

LOG_DIR="${PREFIX:-""}/var/log"

# Only users with $UID 0 have root privileges.
ROOT_UID=0

# Default number of lines saved.
LINES=50

# Can't change directory?
E_XCD=86

# Non-root exit error.
E_NOTROOT=87

# Non-numerical argument (bad argument format).
E_WRONGARGS=85

# Display help message
if [[ "$1" == "-h" || "$1" == "--help" ]]; then
  cat <<EOF
Usage: $(basename "$0") [lines-to-keep]

Truncates log files to save disk space, keeping only the specified
number of most recent lines. Default is 50 lines if not specified.

Options:
  -h, --help    Display this help message and exit

Must be run as root.
EOF
  exit 0
fi

# Run as root, of course.
if ((UID != ROOT_UID)); then
  printf "Error: Must be root to run this script.\n" >&2
  exit "$E_NOTROOT"
fi

case "$1" in
  "")
    lines=50
    ;;
  *[!0-9]*)
    printf "Error: Invalid argument '%s'\n" "$1" >&2
    printf "Usage: %s [lines-to-keep]\n" "$(basename "$0")" >&2
    exit "$E_WRONGARGS"
    ;;
  *)
    lines="$1"
    ;;
esac

if [[ ! -d "$LOG_DIR" ]]; then
  printf "Error: Log directory '%s' does not exist.\n" "$LOG_DIR" >&2
  exit "$E_XCD"
fi

cd "$LOG_DIR" || {
  printf "Error: Cannot change to log directory '%s'.\n" "$LOG_DIR" >&2
  exit "$E_XCD"
}

# Save last section of pacman log file.
if [[ -f pacman.log ]]; then
  tail -n "$lines" pacman.log > pacman.temp \
    && mv pacman.temp pacman.log
  printf "Truncated pacman.log to %d lines.\n" "$lines"
fi

# ': > wtmp' and '> wtmp' have the same effect.
if [[ -f wtmp ]]; then
  : > wtmp
  printf "Cleared wtmp file.\n"
fi

printf "Log files cleaned up successfully.\n"

# shellcheck disable=SC1091
source "${MY_DIR}/debugoff.sh"

exit 0
