#!/usr/bin/env bash
# Cleanup logs script - truncates log files to save disk space
#
# Description:
#   This script truncates log files to save disk space while preserving
#   the most recent lines. It supports both Arch Linux and Ubuntu systems.
#
# Globals:
#   LOG_DIR - Directory containing log files
#   DRY_RUN - Flag for dry run mode
#   debug   - Flag for debug mode
#   DISTRO  - Detected Linux distribution
#
# Arguments:
#   [number-of-lines] - Number of lines to preserve (default: 50)
#   [--dry-run]       - Show what would be done without making changes
#   [--debug]         - Enable debug output
#
# Returns:
#   0 - Success
#   86 - Cannot change to log directory
#   87 - Not running as root
#   85 - Invalid argument
#
# Version: 4.1
# shellcheck disable=SC2155,SC1090,SC1091
set -euo pipefail
shopt -s inherit_errexit

readonly SCRIPT_DIR=$(dirname "$(readlink -f "$0")")
readonly LOG_DIR="${PREFIX:-""}/var/log"
readonly ROOT_UID=0
readonly E_XCD=86
readonly E_NOTROOT=87
readonly E_WRONGARGS=85

DRY_RUN=false
T_LINES=50

source "$SCRIPT_DIR/require.sh"
source "$SCRIPT_DIR/debug.sh"
source "$SCRIPT_DIR/debugon.sh"

require mv tail dirname readlink basename du find grep sudo

usage() {
  cat << EOF
Usage: $0 [OPTION] [lines-to-keep]
Truncates log files to save disk space, keeping only the specified
number of most recent lines. Default is 50 lines if not specified.

Options:
  -h, --help    Display this help message and exit
  --dry-run     Show what would be done without making changes
  --debug       Enable debug output (shows executed commands)

Must be run as root (except in dry-run mode).
The script will automatically use sudo when needed.
EOF
}

parse_args() {
  while [[ $# -gt 0 ]]; do
    case "$1" in
      -h | --help)
        usage
        exit 0
        ;;
      --dry-run)
        DRY_RUN=true
        ;;
      --debug)
        debug=true
        ;;
      *[!0-9]*)
        if [[ "$1" != "--dry-run" && "$1" != "--debug" ]]; then
          printf "Error: Invalid argument '%s'\n" "$1" >&2
          usage >&2
          exit "$E_WRONGARGS"
        fi
        ;;
      *)
        T_LINES="$1"
        ;;
    esac
    shift
  done
}

get_file_size() {
  du -h "$1" | cut -f1
}

calculate_size_diff() {
  local file="$1"
  local lines="$2"
  local original_size new_size tmpfile

  original_size=$(get_file_size "$file")
  tmpfile=$(mktemp -t "$(basename "${file}").XXXXX")
  tail -n "$lines" "$file" > "$tmpfile"
  new_size=$(get_file_size "$tmpfile")
  rm -f "${tmpfile}"

  echo "Original: ${original_size}, After truncation: ${new_size}"
}

process_log_file() {
  local file="$1"
  local lines="$2"

  if [[ "$DRY_RUN" == "true" ]]; then
    printf "Would truncate %s to %d lines\n" "$file" "$lines"
    printf "Size change: %s\n\n" "$(calculate_size_diff "$file" "$lines")"
  else
    tail -n "$lines" "$file" > "${file}.temp" && mv "${file}.temp" "$file"
    printf "Truncated %s to %d lines.\n" "$file" "$lines"
  fi
}

clear_log_file() {
  local file="$1"

  if [[ "$DRY_RUN" == "true" ]]; then
    printf "Would clear %s file (current size: %s)\n\n" "$file" "$(get_file_size "$file")"
  else
    : > "$file"
    printf "Cleared %s file.\n" "$file"
  fi
}

process_rotated_logs() {
  local rotated_logs
  if [[ "$DRY_RUN" == "true" ]]; then
    rotated_logs=$(find . -name "*.1" -o -name "*.gz" 2> /dev/null | grep -v "\.gz\." || true)
    if [[ -n "$rotated_logs" ]]; then
      printf "Would remove the following rotated log files:\n"
      while read -r log; do
        printf "- %s (size: %s)\n" "$log" "$(get_file_size "$log")"
      done <<< "$rotated_logs"
      printf "\n"
    fi
  else
    rotated_logs=$(find . -name "*.1" -o -name "*.gz" | grep -v "\.gz\." || true)
    if [[ -n "$rotated_logs" ]]; then
      while read -r log; do
        rm -f "$log"
        printf "Removed rotated log file: %s\n" "$log"
      done <<< "$rotated_logs"
    fi
  fi
}

main() {
  local debug=false
  parse_args "$@"

  if "$debug"; then
    set -x
  fi

  if "$DRY_RUN"; then
    printf "DRY RUN MODE: No changes will be made\n\n"
    printf "Log directory: %s\n\n" "$LOG_DIR"
  fi

  if ((UID != ROOT_UID)) && ! "$DRY_RUN"; then
    printf "Re-executing with sudo...\n"
    exec sudo "$0" "$@" || {
      printf "Error: Failed to execute with sudo.\n" >&2
      exit "$E_NOTROOT"
    }
  fi

  if [[ ! -d "$LOG_DIR" ]]; then
    printf "Error: Log directory '%s' does not exist.\n" "$LOG_DIR" >&2
    exit "$E_XCD"
  fi

  cd "$LOG_DIR" || {
    printf "Error: Cannot change to log directory '%s'.\n" "$LOG_DIR" >&2
    exit "$E_XCD"
  }

  local DISTRO=""
  if command -v pacman &> /dev/null; then
    DISTRO="arch"
  elif command -v apt &> /dev/null || [[ -f /etc/debian_version ]]; then
    DISTRO="ubuntu"
  fi

  printf "Detected distribution: %s\n" "${DISTRO:-unknown}"

  case "$DISTRO" in
    arch)
      [[ -f pacman.log ]] && process_log_file "pacman.log" "$T_LINES"
      ;;
    ubuntu)
      local ubuntu_logs=("syslog" "auth.log" "kern.log" "dpkg.log" "apt/history.log" "apt/term.log")
      for log in "${ubuntu_logs[@]}"; do
        [[ -f "$log" ]] && process_log_file "$log" "$T_LINES"
      done
      process_rotated_logs
      ;;
  esac

  [[ -f wtmp ]] && clear_log_file "wtmp"
  [[ -f lastlog ]] && clear_log_file "lastlog"

  if "$DRY_RUN"; then
    printf "Other log files in %s that could be processed:\n" "$LOG_DIR"
    shopt -s nullglob
    for log_file in *.log; do
      [[ -f "$log_file" ]] \
        && printf -- "- %s (current size: %s)\n" "$log_file" "$(get_file_size "$log_file")"
    done
    shopt -u nullglob

    if [[ -d "/var/log/journal" ]]; then
      printf "\nSystemd journal logs: %s\n" "$(du -sh "/var/log/journal" | cut -f1)"
      printf "To clean up journal logs, use: journalctl --vacuum-time=1d\n"
    fi
  fi

  source "${SCRIPT_DIR}/debugoff.sh"
}

if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
  main "$@"
fi
