#!/usr/bin/env bash
# shellcheck disable=SC2155,SC1090,SC1091
######################################################################
# Search git commit messages for matching text
######################################################################
set -euo pipefail
shopt -s inherit_errexit

readonly VERSION="1.0.0"
readonly SCRIPT_NAME=$(basename "$0")
readonly EXIT_FAILURE=1

debug=false
verbose=false

function version() {
  printf "%s\n" "$VERSION"
}

function usage() {
  local exit_code=${1:-0}
  if [[ $exit_code -eq 0 ]]; then
    out "Usage: ${SCRIPT_NAME} [OPTION] SEARCH_STRING"
    out "Search git commit messages"
    out ""
    out "Options:"
    out "  --debug       Enable debug output"
    out "  -v, --verbose Enable verbose output"
    out "  -h, --help    Display this help message"
    out "  --version     Display version information"
    out ""
    out "Examples:"
    out "  ${SCRIPT_NAME} \"bug fix\"      # Search for \"bug fix\" in commit messages"
    out "  ${SCRIPT_NAME} --debug \"fix\"  # Search with debug output"
  else
    err "Usage: ${SCRIPT_NAME} [OPTION] SEARCH_STRING"
    err "Try '${SCRIPT_NAME} --help' for more information."
  fi
  exit "$exit_code"
}

function main() {
  local search_string
  parse_arguments "$@"
  setup_environment
  search_commits "$search_string"
}

function parse_arguments() {
  while [[ $# -gt 0 ]]; do
    case "$1" in
      --debug)
        debug=true
        shift
        ;;
      -v | --verbose)
        verbose=true
        shift
        ;;
      -h | --help)
        usage 0
        ;;
      --version)
        version
        exit 0
        ;;
      --)
        shift
        break
        ;;
      -*)
        err "Unknown option: $1"
        usage "$EXIT_FAILURE"
        ;;
      *)
        break
        ;;
    esac
  done

  if [[ $# -lt 1 ]]; then
    err "Error: search string not specified"
    usage "$EXIT_FAILURE"
  fi
  search_string="${1}"
}

function setup_environment() {
  if "$debug"; then
    set -x
  fi

  local script_dir
  if command -v realpath > /dev/null 2>&1; then
    script_dir=$(dirname "$(realpath "$0")")
  else
    script_dir=$(cd -- "$(dirname -- "$0")" &> /dev/null && pwd -P)
  fi

  source "${script_dir}/color.sh"
  source "${script_dir}/require.sh"
  require git
}

function search_commits() {
  print_info "Searching git commits for: $1"
  if ! git log --all --grep="$1"; then
    print_error "Failed to search Git log"
    exit "$EXIT_FAILURE"
  fi
  print_success "Search completed"
}

if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
  main "$@"
fi
