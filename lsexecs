#!/usr/bin/env bash
# List executable files in the current directory
# shellcheck disable=SC2155,SC1090,SC1091

set -euo pipefail
shopt -s inherit_errexit

readonly SCRIPT_NAME=$(basename "$0")
readonly SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
readonly EXIT_SUCCESS=0
readonly EXIT_FAILURE=1
readonly EXIT_USAGE=2
readonly REQUIRED_UTILS=("fdfind") # Or 'fd' depending on the system

source "${SCRIPT_DIR}/color.sh"

debug=false
verbose=false

function usage() {
  cat << EOF >&2
${SCRIPT_NAME} - List executable files in the current directory.

Usage: ${SCRIPT_NAME} [OPTIONS]

Options:
  -h, --help       Display this help message and exit
  -v, --verbose    Enable verbose output
      --debug      Enable debug mode

Examples:
  ${SCRIPT_NAME}
  ${SCRIPT_NAME} --debug
EOF
  exit ${EXIT_USAGE}
}

function parse_arguments() {
  while [[ $# -gt 0 ]]; do
    case "$1" in
      -h|--help) usage ;;
      -v|--verbose) verbose=true; shift ;;
      --debug) debug=true; shift ;;
      -*) print_error "Invalid option: $1"; usage ;;
      *) print_error "Unknown argument: $1"; usage ;;
    esac
    [[ $# -gt 0 ]] && shift
  done
}

function require_dependencies() {
  source "${SCRIPT_DIR}/require.sh"
  require_or_exit "${REQUIRED_UTILS[@]}"
}

function main() {
  parse_arguments "$@"
  [[ "${debug}" == true ]] && set -x

  require_dependencies

  if output=$(fdfind --type executable --max-depth 1 .); then
    [[ -n "${output}" ]] && echo "${output}"
  else
    print_error "Failed to list executable files"
    exit ${EXIT_FAILURE}
  fi
}

if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
  main "$@"
fi
