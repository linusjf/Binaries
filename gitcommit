#!/usr/bin/env bash
######################################################################
# @author      : Linus Fernandes (linusfernandes@gmail.com)
# @file        : gitcommit
# @created     : Tuesday Jan 11, 2022 08:00:00 IST
# @copyright   : Copyright (c) Linus Fernandes
# @description : Commits changes using a message from commit.txt file
######################################################################
# shellcheck disable=SC2155,SC1090,SC1091
set -euo pipefail
shopt -s inherit_errexit

readonly SCRIPT_NAME=$(basename "$0")
readonly VERSION="1.0.0"
readonly EXIT_SUCCESS=0
readonly EXIT_FAILURE=1
readonly EXIT_USAGE=2

debug=false

#
# Display usage information
#
# Globals:
#   SCRIPT_NAME
#   VERSION
# Outputs:
#   Writes help text to stdout
# Returns:
#   None
#
usage() {
  cat << EOF
${SCRIPT_NAME} v${VERSION}
Commit changes using message from commit.txt

Usage: ${SCRIPT_NAME} [OPTION]

Options:
  --debug    Enable debug output
  -h, --help Display this help message

Examples:
  ${SCRIPT_NAME} --debug   # Enable debug output
  ${SCRIPT_NAME} -h        # Show help
EOF
  exit ${EXIT_USAGE}
}

#
# Main function
#
# Globals:
#   debug
# Arguments:
#   Command line arguments
# Returns:
#   Exit status
#
main() {
  parse_arguments "$@"
  setup_environment
  validate_environment
  commit_changes

  exit ${EXIT_SUCCESS}
}

#
# Parse command line arguments
#
# Globals:
#   debug
# Arguments:
#   Command line arguments
# Returns:
#   None
#
parse_arguments() {
  while [[ $# -gt 0 ]]; do
    case "$1" in
      --debug)
        debug=true
        ;;
      -h | --help)
        usage
        ;;
      *)
        printf "Error: Invalid option '%s'\n" "$1" >&2
        usage
        ;;
    esac
    shift
  done
}

#
# Setup script environment
#
# Globals:
#   debug
#   SCRIPT_DIR
# Returns:
#   None
#
setup_environment() {
  if "${debug}"; then
    set -x
  fi

  local script_dir
  script_dir=$(dirname "$(readlink -f "$0")")
  # shellcheck source=/dev/null
  source "${script_dir}/require.sh"
  # shellcheck source=/dev/null
  source "${HOME}/.gitrc"

  require git hub
}

#
# Validate environment requirements
#
# Globals:
#   None
# Outputs:
#   Writes error messages to stderr if validation fails
# Returns:
#   EXIT_FAILURE if validation fails
#
validate_environment() {
  if ! git rev-parse --is-inside-work-tree > /dev/null 2>&1; then
    printf "Error: Not in a git repository\n" >&2
    exit ${EXIT_FAILURE}
  fi

  if [[ ! -e commit.txt ]]; then
    printf "Error: commit.txt not found\n" >&2
    usage
  fi
}

#
# Commit changes using commit.txt message
#
# Globals:
#   None
# Returns:
#   Exit status from git commit
#
commit_changes() {
  git commit -F commit.txt
}

if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
  main "$@"
fi
