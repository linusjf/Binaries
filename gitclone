#!/usr/bin/env bash
# Clone git repositories with automatic submodule initialization
# shellcheck disable=SC2155,SC1090,SC1091
set -euo pipefail
shopt -s inherit_errexit

readonly SCRIPT_NAME=$(basename "$0")
readonly EXIT_FAILURE=1

debug=false

usage() {
  cat << EOF
${SCRIPT_NAME} - Git repository cloner with submodule support

Usage: ${SCRIPT_NAME} [OPTION] REPOSITORY [CLONE_OPTIONS]

Options:
  --debug    Enable debug output
  -h, --help Display this help message

Examples:
  ${SCRIPT_NAME} owner/repo       # Clone repository
  ${SCRIPT_NAME} --debug owner/repo # Clone with debug output
EOF
  exit ${EXIT_FAILURE}
}

main() {
  parse_arguments "$@"
  setup_environment
  clone_repository "$@"
}

parse_arguments() {
  while [[ $# -gt 0 ]]; do
    case "$1" in
      --debug)
        debug=true
        shift
        ;;
      -h | --help)
        usage
        ;;
      *)
        break
        ;;
    esac
  done

  if [[ $# -lt 1 ]]; then
    echo "Error: repository not specified" >&2
    usage
  fi
}

setup_environment() {
  if "${debug}"; then
    set -x
  fi

  local script_dir
  script_dir=$(dirname "$(readlink -f "$0")")
  source "${script_dir}/require.sh"

  if [[ -e "${script_dir}/internet.sh" ]]; then
    source "${script_dir}/internet.sh"
  fi

  require gh
}

clone_repository() {
  if ! gh repo clone "$@" -- --recurse-submodules; then
    echo "Error cloning repository" >&2
    exit ${EXIT_FAILURE}
  fi
}

if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
  main "$@"
fi
