#!/usr/bin/env bash
######################################################################
######################################################################
set -euo pipefail
shopt -s inherit_errexit

readonly SCRIPT_NAME=$(basename "$0")
readonly EXIT_SUCCESS=0
readonly EXIT_FAILURE=1
readonly VERSION="1.0.0"

verbose=false
debug=false

function version() {
  printf "%s\n" "$VERSION"
}

function usage() {
  local exit_code=${1:-0}
  if [[ $exit_code -eq 0 ]]; then
    out "Usage: ${SCRIPT_NAME} [OPTION]"
    out "Check SQL files for potential issues using sqlcheck"
    out ""
    out "Options:"
    out "  -v, --verbose  Enable verbose output"
    out "  --debug        Enable debug output"
    out "  -h, --help     Display this help message"
    out "  --version      Display version information"
    out ""
    out "Examples:"
    out "  ${SCRIPT_NAME}          # Check all SQL files"
    out "  ${SCRIPT_NAME} --debug  # Enable debug output"
  else
    err "Usage: ${SCRIPT_NAME} [OPTION]"
    err "Try '${SCRIPT_NAME} --help' for more information."
  fi
  exit "$exit_code"
}

function main() {
  parse_arguments "$@"
  setup_environment
  run_checks
}

function parse_arguments() {
  while [[ $# -gt 0 ]]; do
    case "$1" in
      -v | --verbose)
        verbose=true
        shift
        ;;
      --debug)
        debug=true
        set -x
        shift
        ;;
      -h | --help) usage ;;
      --version)
        version
        exit $EXIT_SUCCESS
        ;;
      -*)
        err "Unknown option: $1"
        usage $EXIT_FAILURE
        ;;
      *)
        err "Unexpected argument: $1"
        usage $EXIT_FAILURE
        ;;
    esac
  done
}

function setup_environment() {
  if command -v realpath > /dev/null 2>&1; then
    SCRIPT_DIR=$(dirname "$(realpath "$0")")
  else
    SCRIPT_DIR=$(cd -- "$(dirname -- "$0")" &> /dev/null && pwd -P)
  fi

  source "${SCRIPT_DIR}/color.sh"
  source "${SCRIPT_DIR}/util.sh"
  source "${SCRIPT_DIR}/require.sh"

  require rm sqlcheck tee
}

function run_checks() {
  local -i exit_code=0
  local -i file_count=0

  if [[ -f ./check.errors ]]; then
    rm -f ./check.errors || die "Unable to remove existing check.errors file"
  fi

  shopt -s nullglob
  local sql_files=(*.sql)
  shopt -u nullglob

  if [[ ${#sql_files[@]} -eq 0 ]]; then
    print_warning "No SQL files found in the current directory"
    exit $EXIT_SUCCESS
  fi

  print_info "Checking SQL files for potential issues..."

  for f in "${sql_files[@]}"; do
    print_info "Analyzing $f..."
    sqlcheck -c -v -f "$f" | tee -a check.errors
    local last_exit_code=$?
    ((exit_code |= last_exit_code))
    ((file_count++))

    if [[ $last_exit_code -ne 0 ]]; then
      print_warning "Issues found in $f"
    fi
  done

  print_info "Completed checking $file_count SQL file(s)"
  if [[ $exit_code -eq 0 ]]; then
    print_success "No issues found"
  else
    print_error "Issues found - check the check.errors file for details"
  fi

  exit $exit_code
}

if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
  main "$@"
fi
