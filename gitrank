#!/usr/bin/env bash
# shellcheck disable=SC2155,SC1090,SC1091

set -euo pipefail
shopt -s inherit_errexit

readonly SCRIPT_NAME=$(basename "$0")
readonly SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
readonly EXIT_SUCCESS=0
readonly EXIT_FAILURE=1
readonly EXIT_USAGE=2
readonly REQUIRED_UTILS=("git")

debug=false # Flag for debug mode

#
#
#
function print_error() {
  printf "\033[0;31mError: %s\033[0m\n" "$1" >&2
}

#
#
#
function usage() {
  cat << EOF >&2
${SCRIPT_NAME} - Ranks Git contributors by commit count (excluding merges).

Usage: ${SCRIPT_NAME} [OPTIONS]

Displays a list of contributors sorted by the number of non-merge commits.

Options:
  -h, --help       Display this help message and exit.
      --debug      Enable debug mode (set -x).

Requires:
  - Git command line tool (${REQUIRED_UTILS[*]}).
  - Must be run inside a Git repository.

Examples:
  ${SCRIPT_NAME}
  ${SCRIPT_NAME} --debug
EOF
  exit ${EXIT_USAGE}
}

#
#
#
function parse_arguments() {
  while [[ $# -gt 0 ]]; do
    case "$1" in
      -h | --help)
        usage
        ;;
      --debug)
        debug=true
        # Debug mode is activated later, just before calling main logic
        shift
        ;;
      -*)
        print_error "Invalid option: $1"
        usage
        ;;
      *)
        # No positional arguments expected
        print_error "Unknown argument: $1"
        usage
        ;;
    esac
    # This check prevents infinite loops if an unexpected argument is somehow
    # not handled by the cases above or if shift is missed.
    if [[ $# -gt 0 && "$1" == "${1-}" ]]; then # Check if $1 exists before shifting
      shift
    fi
  done
}

#
#
#
function main() {
  parse_arguments "$@"

  # Activate debug mode if requested
  if [[ "${debug}" == true ]]; then
    set -x
  fi

  # Source require.sh and check dependencies
  # shellcheck disable=SC1091 # Source path is determined dynamically
  source "${SCRIPT_DIR}/require.sh"
  require_or_exit "${REQUIRED_UTILS[@]}"

  # Ensure script is run inside a Git repository
  if ! git rev-parse --is-inside-work-tree > /dev/null 2>&1; then
    print_error "Not a Git repository. Exiting..."
    exit ${EXIT_FAILURE}
  fi

  # Display contributor rankings
  if ! git shortlog -s -n --no-merges; then
    print_error "Failed to fetch contributor rankings."
    # The error from git shortlog itself might be sufficient,
    # but we add context and ensure a non-zero exit.
    exit ${EXIT_FAILURE}
  fi

  exit ${EXIT_SUCCESS}
}

if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
  # Wrap main execution in subshell to isolate 'set -x' if debug is enabled
  (main "$@")
fi
