#!/usr/bin/env bash

## Copyright (C) 2006-2011 Daniel Baumann <daniel.baumann@progress-technologies.net>
##
## This program comes with ABSOLUTELY NO WARRANTY; for details see COPYING.
## This is free software, and you are welcome to redistribute it
## under certain conditions; see COPYING for details.

set -euo pipefail
shopt -s inherit_errexit

readonly VERSION="1.1.0"
readonly SCRIPT_NAME=$(basename "$0")

# Source color utilities
if command -v realpath > /dev/null 2>&1; then
  readonly SCRIPT_DIR=$(dirname "$(realpath "$0")")
else
  readonly SCRIPT_DIR=$(cd -- "$(dirname -- "$0")" &> /dev/null && pwd -P)
fi
source "${SCRIPT_DIR}/color.sh" || {
  echo "Failed to source color utilities" >&2
  exit 1
}
source "${SCRIPT_DIR}/git.sh" || {
  echo "Failed to source git utilities" >&2
  exit 1
}

#######################################
# Print usage information
# Globals:
#   SCRIPT_NAME
# Arguments:
#   None
# Outputs:
#   Writes usage to STDOUT
#######################################
function usage() {
  cat << EOF
Usage: ${SCRIPT_NAME} [OPTIONS]

Options:
  -h, --help      Show this help message and exit
  -v, --verbose   Enable verbose output
  -d, --debug     Enable debug mode (set -x)
  --version       Show version information

Description:
  Checks out all remote branches in the current git repository as local branches,
  preserving the current working branch.

Examples:
  ${SCRIPT_NAME}          # Checkout all remote branches
  ${SCRIPT_NAME} --debug  # Enable debug output
EOF
}

#######################################
# Print version information
# Globals:
#   VERSION
# Arguments:
#   None
# Outputs:
#   Writes version to STDOUT
#######################################
function version() {
  echo "${SCRIPT_NAME} v${VERSION}"
}

#######################################
# Setup environment and verify dependencies
# Globals:
#   None
# Arguments:
#   None
# Outputs:
#   Writes error messages to STDERR
# Returns:
#   0 if successful, non-zero on error
#######################################
function setup_environment() {
  if [[ -f "${HOME}/.gitrc" ]]; then
    # shellcheck source=/dev/null
    source "${HOME}/.gitrc" || {
      print_warning "Failed to load ~/.gitrc"
    }
  fi

  require git awk grep hub || return 1
}

#######################################
# Checkout all remote branches as local branches
# Globals:
#   None
# Arguments:
#   None
# Outputs:
#   Writes progress to STDOUT
# Returns:
#   0 if successful, non-zero on error
#######################################
function checkout_remote_branches() {
  local current_branch
  current_branch=$(get_current_branch) || return 1

  print_info "Checking out all remote branches..."

  while read -r remote_branch; do
    local branch_name="${remote_branch#*/}"

    if [[ "${branch_name}" != "HEAD" ]]; then
      if ! git show-ref --quiet "refs/heads/${branch_name}"; then
        print_info "Creating local branch: ${branch_name}"
        git checkout -b "${branch_name}" "${remote_branch}" || {
          print_error "Failed to checkout ${branch_name}"
          continue
        }
      fi
    fi
  done < <(git branch -r | awk '{ print $1 }')

  # Switch back to original branch if needed
  if [[ "$(get_current_branch)" != "${current_branch}" ]]; then
    git checkout "${current_branch}" > /dev/null || {
      print_error "Failed to switch back to ${current_branch}"
      return 1
    }
  fi

  print_info "Done!"
}

#######################################
# Main function
# Globals:
#   None
# Arguments:
#   Command line arguments
# Outputs:
#   Writes output to STDOUT/STDERR
# Returns:
#   Exit status of last command
#######################################
function main() {
  local verbose=false
  local debug=false

  while [[ $# -gt 0 ]]; do
    case "$1" in
      -h | --help)
        usage
        exit 0
        ;;
      -v | --verbose)
        verbose=true
        ;;
      -d | --debug)
        debug=true
        ;;
      --version)
        version
        exit 0
        ;;
      *)
        print_error "Unknown option: $1"
        usage >&2
        exit 1
        ;;
    esac
    shift
  done

  if [[ "${debug}" == true ]]; then
    set -x
  fi

  setup_environment || exit 1
  is_git_repository || exit 1
  checkout_remote_branches
}

if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
  main "$@"
fi
