#!/usr/bin/env bash
#
# Automates update of git submodules in parent repo.
# Checks out main/dev branches in each submodule owned by GITHUB_USERNAME,
# merges main into dev, pushes changes, and updates parent repo if submodules changed.
#
# @author Linus Fernandes (linusfernandes@gmail.com)
# @copyright Copyright (c) Linus Fernandes
# @version 1.0.1

set -euo pipefail
shopt -s inherit_errexit

# --- Constants ---
readonly SCRIPT_NAME="$(basename "$0")"
readonly EXIT_SUCCESS=0
readonly EXIT_FAILURE=1
readonly EXIT_USAGE=2
readonly REQUIRED_UTILS=("git")
readonly VERSION="1.0.1"
readonly MAIN_BRANCHES=("main" "master")

SCRIPT_DIR=$(dirname "$(readlink -f "$0")")

if [[ -e "${SCRIPT_DIR}/internet.sh" ]]; then
  source "${SCRIPT_DIR}/internet.sh"
fi
# Source utility functions
source "${SCRIPT_DIR}/color.sh"
source "${SCRIPT_DIR}/git.sh"

# --- Functions ---

# @description Display script version
# @output Version number to STDOUT
function version() {
  printf "%s\n" "${VERSION}"
}

# @description Display usage information
# @output Usage information to STDERR
function usage() {
  local exitcode="$1"
  cat << EOF >&2
${SCRIPT_NAME} - Update Git submodules and parent repository
Version: ${VERSION}

Usage: ${SCRIPT_NAME} [OPTIONS]

Options:
  -h, --help       Display this help
  -v, --verbose    Enable verbose output
  --debug          Enable debug mode
  --version        Display version information

Examples:
  # Basic usage
  ${SCRIPT_NAME}

  # Verbose mode
  ${SCRIPT_NAME} --verbose

  # Debug mode
  ${SCRIPT_NAME} --debug
EOF
  exit "${exitcode}"
}

# @description Clean up resources on exit
# @arg $1 integer Exit code
# @globals
#   root_dir
#   last_command
#   debug_mode
function cleanup() {
  local -r exit_code="$1"
  [[ "${debug_mode:-false}" == true ]] && set +x

  if [[ -n "${root_dir:-}" && "$(pwd)" != "${root_dir}" ]]; then
    cd "${root_dir}" || print_error "Failed to return to ${root_dir}"
  fi

  if [[ ${exit_code} -ne ${EXIT_SUCCESS} ]]; then
    print_error "Script failed with exit code ${exit_code}"
    [[ -n "${last_command:-}" ]] && print_error "Last command: ${last_command}"
  fi

  exit "${exit_code}"
}

# @description Execute command with error handling
# @arg $@ string Command to execute
# @globals last_command
# @output Command output if verbose or debug enabled
# @returns Exit code of command
function run_command() {
  last_command="$*"
  print_info "Running: ${last_command}"
  if [[ "${verbose:-false}" == true || "${debug_mode:-false}" == true ]]; then
    "$@"
  else
    "$@" > /dev/null 2>&1
  fi
  local -r ret="$?"
  [[ ${ret} -ne 0 ]] && print_error "Command failed: ${last_command}"
  return "${ret}"
}

# @description Parse command line arguments
# @arg $@ array Command line arguments
# @globals verbose debug_mode
# @sets verbose debug_mode
function parse_arguments() {
  while [[ $# -gt 0 ]]; do
    case "$1" in
      -h | --help) usage "$EXIT_SUCCESS" ;;
      -v | --verbose) verbose=true ;;
      --debug)
        debug_mode=true
        set -x
        ;;
      --version)
        version
        exit 0
        ;;
      *)
        print_error "Invalid argument: $1"
        usage "$EXIT_USAGE"
        ;;
    esac
    shift
  done
}

# @description Update all git submodules
# @arg $1 boolean Whether to merge changes
# @returns Exit code of git submodule command
function update_submodules() {
  local -r merge_changes="$1"
  if [[ "${merge_changes}" == true ]]; then
    run_command git submodule update --remote --merge
  else
    run_command git submodule update --remote --checkout --force
  fi
}

# @description Main function
# @arg $@ array Command line arguments
# @globals initial_branch branches root_dir
# @returns Exit code
function main() {
  trap 'cleanup $?' EXIT
  parse_arguments "$@"

  # Validate environment
  for util in "${REQUIRED_UTILS[@]}"; do
    if ! command -v "${util}" > /dev/null; then
      print_error "Missing required utility: ${util}"
      exit ${EXIT_FAILURE}
    fi
  done

  # Get repository root
  if ! root_dir="$(git_root)"; then
    exit ${EXIT_FAILURE}
  fi
  cd "${root_dir}" || exit ${EXIT_FAILURE}

  local initial_branch
  initial_branch="$(get_current_branch)"

  local -a branches
  readarray -t branches < <(git for-each-ref --format='%(refname:short)' refs/heads)

  for branch in "${branches[@]}"; do
    print_info "Processing branch: ${branch}"
    run_command git checkout "${branch}"

    # Update submodules
    update_submodules false || exit ${EXIT_FAILURE}

    # Check if branch has changes
    if ! git diff --quiet; then
      # Check if only branch is dirty (not submodules)
      if ! git diff --quiet --ignore-submodules; then
        local stash_name="${SCRIPT_NAME}-${VERSION}-${branch}-$(date +'%Y-%m-%dT%H:%M:%S%z')"
        print_warning "Stashing dirty files for branch: ${branch} as ${stash_name}..."
        run_command git stash push -m "${stash_name}" --include-untracked
        print_warning "Use command 'git stash apply stash ${stash_name}' to restore your changes."
      fi

      # Check if submodules are dirty
      if ! git diff --submodule --quiet; then
        run_command git pull
        run_command git add .
        run_command git commit -m "feat: Update submodules $(date +'%Y-%m-%dT%H:%M:%S%z')"
        run_command git push origin "${branch}"
      fi
    fi

    # Merge submodules
    update_submodules true
  done

  print_info "Switching back to ${initial_branch}"
  run_command git switch "${initial_branch}"

  for main_br in "${MAIN_BRANCHES[@]}"; do
    if run_command git submodule foreach --recursive "git checkout ${main_br} && git pull" 2> /dev/null; then
      break
    fi
  done
}

if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
  main "$@"
fi
