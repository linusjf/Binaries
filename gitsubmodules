#!/usr/bin/env bash

######################################################################
# @author      : Linus Fernandes (linusfernandes@gmail.com)
# @file        : gitsubmodules
# @created     : Friday Mar 28, 2025 05:29:00 IST
# @copyright   : Copyright (c) Linus Fernandes
# @description : Automates update of git submodules in parent repo
######################################################################
set -x
set -euo pipefail
shopt -s inherit_errexit
RED="\033[0;31m"
NC="\033[0m" # No Color

# shellcheck disable=SC2317,SC2329
function message() {
  local ret=$1
  if [ "$ret" -eq 0 ]; then
    git diff development main
    git gc
  else
    echo -e "${RED}Returning to branch development${NC}"
    git switch development || exit 1
  fi
  exit "$ret"
}

function get_alt_branch() {
  if [[ "${1}" == "main" ]]; then
    echo "development"
  else
    echo "main"
  fi
}

attach_submodules() {
  submodules=("$(git submodule foreach --recursive | cut -d' ' -f2 | sed "s/^'\|'$//g")")

  # Loop through each submodule
  for submodule in "${submodules[@]}"; do
    orig_dir="$(pwd)"
    cd "$submodule"
    git checkout main
    git pull origin main
    git add .
    if git commit -m 'Updated submodule from remote'; then
      git push
    fi
    git checkout development
    git pull origin development
    git merge main
    cd "$orig_dir"
  done

  git submodule update --remote
  return 0
}

# Source the require.sh file
SCRIPT_DIR=$(dirname "$(readlink -f "$0")")
# shellcheck disable=SC1091
source "$SCRIPT_DIR/require.sh"

if [[ -e "${SCRIPT_DIR}/internet.sh" ]]; then
  # shellcheck disable=SC1091
  source "${SCRIPT_DIR}/internet.sh"
fi

require git

trap 'ret=$?; message $ret' EXIT

curr_branch="$(git branch --show-current)"

if ! git show-ref --verify --quiet refs/heads/development; then
  git branch --create-reflog development
fi

attach_submodules

if git status --porcelain | grep '^ M'; then
  echo "feat: Update submodules $(date)" > commit.txt
  git add .
  git status
  git commit -F commit.txt
  git push origin "$curr_branch"
  alt_branch="$(get_alt_branch "$curr_branch")"
  git checkout "${alt_branch}"
  git merge "$curr_branch"
  git push origin "${alt_branch}"
  git checkout development
  git submodule update --remote
  echo "Submodules updated."
else
  echo "Submodules already up to date."
fi

exit 0
