#!/usr/bin/env bash
######################################################################
# Moves Java source files into package-based directories.
# Creates package-info.java if it does not exist.
######################################################################
# shellcheck disable=SC2155,SC1090,SC1091
set -euo pipefail
shopt -s inherit_errexit

readonly SCRIPT_NAME=$(basename "$0")
readonly EXIT_SUCCESS=0
readonly EXIT_FAILURE=1
readonly PKG_INFO_FILE="package-info.java"

verbose=false
dry_run=false

function usage() {
  cat << EOF
${SCRIPT_NAME} - Organizes Java files by package structure

Usage: ${SCRIPT_NAME} [OPTION]

Options:
  -d, --dry-run    Show what would be done without making changes
  -v, --verbose    Enable verbose output
  --debug          Enable debug output
  -h, --help       Display this help message

Examples:
  ${SCRIPT_NAME}          # Process all Java files in current directory
  ${SCRIPT_NAME} -v       # Verbose output
  ${SCRIPT_NAME} --debug  # Debug mode
EOF
  exit ${EXIT_FAILURE}
}

function print_warning() {
  printf "\033[1;33m%s\033[0m\n" "$1" >&2
}

function print_error() {
  printf "\033[1;31m%s\033[0m\n" "$1" >&2
}

function print_info() {
  printf "\033[1;36m%s\033[0m\n" "$1"
}

function process_java_file() {
  local file="$1"
  local package
  package=$(sed -n '1s/package[[:space:]]\+\([^;]\+\);/\1/p' "$file")

  if [[ -z "$package" ]]; then
    print_warning "Skipping $file (no package directive found)"
    return
  fi

  local dir="${package//./\/}"

  if ${dry_run}; then
    print_info "[DRY RUN] Would create directory: $dir"
    print_info "[DRY RUN] Would move $file to $dir/"
    if [[ ! -e "$dir/$PKG_INFO_FILE" ]]; then
      print_info "[DRY RUN] Would create $dir/$PKG_INFO_FILE"
    fi
    return
  fi

  mkdir -p "$dir" || {
    print_error "Failed to create directory $dir"
    return ${EXIT_FAILURE}
  }

  mv "$file" "$dir/" || {
    print_error "Failed to move $file to $dir/"
    return ${EXIT_FAILURE}
  }

  if [[ ! -e "$dir/$PKG_INFO_FILE" ]]; then
    echo "package $package;" > "$dir/$PKG_INFO_FILE"
    ${verbose} && print_info "Created $dir/$PKG_INFO_FILE"
  fi
}

function main() {
  while [[ $# -gt 0 ]]; do
    case "$1" in
      -d | --dry-run)
        dry_run=true
        shift
        ;;
      -v | --verbose)
        verbose=true
        shift
        ;;
      --debug)
        set -x
        shift
        ;;
      -h | --help) usage ;;
      *)
        print_error "Invalid option: $1"
        usage
        ;;
    esac
  done

  require head grep mv awk sed find

  find . -maxdepth 1 -name "*.java" -type f | while read -r file; do
    process_java_file "$file"
  done

  ${verbose} && print_info "All Java files processed successfully"
  return ${EXIT_SUCCESS}
}

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
source "${SCRIPT_DIR}/require.sh"

if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
  main "$@"
fi
