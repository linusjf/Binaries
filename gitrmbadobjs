#!/usr/bin/env bash
######################################################################
# Script to clean temporary Git objects from repository
######################################################################
# shellcheck disable=SC2155,SC1090,SC1091
set -euo pipefail
shopt -s inherit_errexit

readonly SCRIPT_NAME=$(basename "$0")
readonly EXIT_FAILURE=1

debug=false
verbose=false

usage() {
  cat << EOF
${SCRIPT_NAME} - Clean temporary Git objects

Usage: ${SCRIPT_NAME} [OPTION]

Options:
  --debug    Enable debug output
  -v, --verbose Enable verbose output
  -h, --help Display this help message

Examples:
  ${SCRIPT_NAME}          # Clean temporary Git objects
  ${SCRIPT_NAME} --debug  # Clean with debug output
  ${SCRIPT_NAME} -v       # Clean with verbose output
EOF
  exit ${EXIT_FAILURE}
}

main() {
  parse_arguments "$@"
  setup_environment
  clean_temporary_objects
}

parse_arguments() {
  while [[ $# -gt 0 ]]; do
    case "$1" in
      --debug)
        debug=true
        shift
        ;;
      -v | --verbose)
        verbose=true
        shift
        ;;
      -h | --help)
        usage
        ;;
      *)
        printf "Error: Invalid argument '%s'\n" "$1" >&2
        usage
        ;;
    esac
  done
}

setup_environment() {
  if "${debug}"; then
    set -x
  fi

  local script_dir
  script_dir=$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)
  source "${script_dir}/require.sh"
  require git find
}

clean_temporary_objects() {
  local root
  root=$(git rev-parse --show-toplevel 2> /dev/null)

  if [[ -z "$root" ]]; then
    printf "Error: Not a Git repository\n" >&2
    exit ${EXIT_FAILURE}
  fi

  if [[ ! -d "${root}/.git" ]]; then
    printf "Error: .git directory not found\n" >&2
    exit ${EXIT_FAILURE}
  fi

  if "${debug}"; then
    printf "Cleaning temporary objects in: %s/.git\n" "$root"
  fi

  if "${verbose}"; then
    printf "Searching for temporary objects in %s/.git...\n" "$root"
    local count=0
    while IFS= read -r -d $'\0' file; do
      printf "Found temporary object: %s\n" "$file"
      ((count++))
    done < <(find "${root}/.git" -type f -name "*.tmp_obj*" -print0)

    if [[ $count -gt 0 ]]; then
      printf "Deleting %d temporary objects...\n" "$count"
      find "${root}/.git" -type f -name "*.tmp_obj*" -delete
      printf "Deleted %d temporary Git objects in %s/.git\n" "$count" "$root"
    else
      printf "No temporary objects found to delete\n"
    fi
  else
    find "${root}/.git" -type f -name "*.tmp_obj*" -delete
    printf "Deleted temporary Git objects in %s/.git\n" "$root"
  fi
}

if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
  main "$@"
fi
