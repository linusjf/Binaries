#!/usr/bin/env bash
######################################################################
# Creates package directories for one or more Java packages.
######################################################################
# shellcheck disable=SC2155,SC1090,SC1091
set -euo pipefail
shopt -s inherit_errexit

readonly SCRIPT_NAME=$(basename "$0")
readonly EXIT_SUCCESS=0
readonly EXIT_FAILURE=1
readonly VERSION="1.0.0"

verbose=false
dry_run=false
debug=false

function usage() {
  cat << EOF
${SCRIPT_NAME} - Creates package directories for Java packages

Usage: ${SCRIPT_NAME} [OPTION] <package1> [package2] [package3] ...

Options:
  -d, --dry-run    Show what would be done without making changes
  -v, --verbose    Enable verbose output
  --debug          Enable debug output
  -h, --help       Display this help message
  --version        Display version information

Examples:
  ${SCRIPT_NAME} com.example.project       # Create single package
  ${SCRIPT_NAME} com.foo com.bar com.baz   # Create multiple packages
  ${SCRIPT_NAME} -d com.example.test       # Dry run mode
EOF
  exit ${EXIT_FAILURE}
}

function version() {
  printf "%s\n" "${VERSION}"
}

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
source "${SCRIPT_DIR}/color.sh"
source "${SCRIPT_DIR}/require.sh"

function main() {
  local packages=()

  while [[ $# -gt 0 ]]; do
    case "$1" in
      -d | --dry-run)
        dry_run=true
        shift
        ;;
      -v | --verbose)
        verbose=true
        shift
        ;;
      --debug)
        debug=true
        set -x
        shift
        ;;
      -h | --help) usage ;;
      --version)
        version
        exit ${EXIT_SUCCESS}
        ;;
      -*)
        print_error "Invalid option: $1"
        usage
        ;;
      *)
        packages+=("$1")
        shift
        ;;
    esac
  done

  if [[ ${#packages[@]} -eq 0 ]]; then
    print_error "Error: At least one package name is required"
    usage
  fi

  require mkdir

  for package in "${packages[@]}"; do
    local dir="${package//./\/}"

    if ${dry_run}; then
      print_info "[DRY RUN] Would create directory: ${dir}"
    else
      if ${verbose}; then
        print_info "Creating directory: ${dir}"
      fi
      mkdir -p "${dir}" || {
        print_error "Failed to create directory '${dir}'"
        return ${EXIT_FAILURE}
      }
    fi
  done

  ${verbose} && print_info "All directories created successfully"
  return ${EXIT_SUCCESS}
}

if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
  main "$@"
fi
