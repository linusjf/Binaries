#!/usr/bin/env bash
#
# Remove broken symbolic links with interactive confirmation
# Version: 1.0.0

set -euo pipefail
shopt -s inherit_errexit

readonly VERSION="1.0.0"

# Source required utilities
script_dir=$(dirname "$(readlink -f "$0")")
source "${script_dir}/require.sh"

function usage() {
  cat << EOF
Usage: ${0##*/} [OPTION]
Remove broken symbolic links

Options:
  -d, --dry-run    Print links to be deleted instead of deleting
  -h, --help       Display this help message
  -p, --print      Print list of broken links
  --debug          Enable debug output (shows executed commands)
  --version        Display version information
EOF
}

function version() {
  echo "${VERSION}"
}

function main() {
  local dry_run=false
  local print=false
  local debug=false
  local broken_links=()

  parse_arguments "$@"
  setup_debug_mode
  find_broken_links
  handle_links
}

function parse_arguments() {
  while [[ $# -gt 0 ]]; do
    case $1 in
      -d | --dry-run) dry_run=true ;;
      -p | --print) print=true ;;
      --debug) debug=true ;;
      -h | --help) usage; exit 0 ;;
      --version) version; exit 0 ;;
      *) usage; exit 1 ;;
    esac
    shift
  done
}

function setup_debug_mode() {
  if [[ "${debug}" == true ]]; then
    set -x
  fi
}

function find_broken_links() {
  require_or_exit find mapfile rm

  mapfile -t broken_links < <(find . -xtype l -print)
}

function handle_links() {
  if [[ ${#broken_links[@]} -eq 0 ]]; then
    echo "No broken symbolic links found."
    exit 0
  fi

  if [[ "${print}" == true ]]; then
    printf "%s\n" "${broken_links[@]}"
    exit 0
  fi

  process_links
}

function process_links() {
  local all_links="no"

  for link in "${broken_links[@]}"; do
    if [[ "${all_links}" == "yes" ]]; then
      process_link "${link}"
      continue
    fi

    read -rp "Delete ${link}? (yes/no/all/abort): " response
    case "${response}" in
      y | yes) process_link "${link}" ;;
      all)
        all_links="yes"
        process_link "${link}"
        ;;
      abort)
        echo "Operation aborted."
        exit 1
        ;;
      *) echo "Skipping ${link}" ;;
    esac
  done
}

function process_link() {
  local link="$1"
  if [[ "${dry_run}" == true ]]; then
    echo "Would delete ${link}"
  else
    rm -f "${link}"
    echo "Deleted ${link}"
  fi
}

if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
  main "$@"
fi
